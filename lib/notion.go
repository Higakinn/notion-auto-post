package lib

import (
	"fmt"
	"net/http"
	"encoding/json"
	"strings"
	"io/ioutil"
	"time"

	"github.com/pkg/errors"
)
type AutoGenerated struct {
	Object  string `json:"object"`
	Results []struct {
		Object         string    `json:"object"`
		ID             string    `json:"id"`
		CreatedTime    time.Time `json:"created_time"`
		LastEditedTime time.Time `json:"last_edited_time"`
		CreatedBy      struct {
			Object string `json:"object"`
			ID     string `json:"id"`
		} `json:"created_by"`
		LastEditedBy struct {
			Object string `json:"object"`
			ID     string `json:"id"`
		} `json:"last_edited_by"`
		Cover  interface{} `json:"cover"`
		Icon   interface{} `json:"icon"`
		Parent struct {
			Type       string `json:"type"`
			DatabaseID string `json:"database_id"`
		} `json:"parent"`
		Archived   bool `json:"archived"`
		Properties struct {
			Tags struct {
				ID       string        `json:"id"`
				Type     string        `json:"type"`
				Relation []interface{} `json:"relation"`
			} `json:"Tags"`
			Status struct {
				ID     string      `json:"id"`
				Type   string      `json:"type"`
				Select interface{} `json:"select"`
			} `json:"status"`
			Name struct {
				ID    string `json:"id"`
				Type  string `json:"type"`
				Title []struct {
					Type string `json:"type"`
					Text struct {
						Content string      `json:"content"`
						Link    interface{} `json:"link"`
					} `json:"text"`
					Annotations struct {
						Bold          bool   `json:"bold"`
						Italic        bool   `json:"italic"`
						Strikethrough bool   `json:"strikethrough"`
						Underline     bool   `json:"underline"`
						Code          bool   `json:"code"`
						Color         string `json:"color"`
					} `json:"annotations"`
					PlainText string      `json:"plain_text"`
					Href      interface{} `json:"href"`
				} `json:"title"`
			} `json:"Name"`
			Date struct {
				ID   string `json:"id"`
				Type string `json:"type"`
				Date struct {
					Start    string      `json:"start"`
					End      interface{} `json:"end"`
					TimeZone interface{} `json:"time_zone"`
				} `json:"date"`
			} `json:"Date"`
			URL struct {
				ID   string `json:"id"`
				Type string `json:"type"`
				URL  string `json:"url"`
			} `json:"URL"`
		} `json:"properties"`
		URL string `json:"url"`
	} `json:"results"`
	NextCursor string `json:"next_cursor"`
	HasMore    bool   `json:"has_more"`
	Type       string `json:"type"`
	Page       struct {
	} `json:"page"`
}
type HTTPAPI interface {
	Do(req *http.Request) (*http.Response, error)
}

type NotionClient struct {
	accessToken string
	httpAPI 		HTTPAPI
}

func NewNotionClient(accessToken string) *NotionClient {
	return &NotionClient{
		accessToken: accessToken,
		httpAPI:     http.DefaultClient,
	}
}

func (c *NotionClient) QueryDatabases(dbId string) (*AutoGenerated, error) {
	url := fmt.Sprintf("https://api.notion.com/v1/databases/%s/query", dbId)

	// payload := strings.NewReader("{\"filter\": { \"and\": [ { \"property\": \"Tags\", \"relation\": { \"contains\": \"1bbac207-6611-4126-8382-7ba2d0544f55\" } } ] }}")
	apiFilter := `{ "filter": { "and": [ { "property": "Tags", "relation": { "contains": "1bbac207-6611-4126-8382-7ba2d0544f55" } }, { "property": "read", "checkbox": { "equals": false } } ] } }`
	payload := strings.NewReader(apiFilter)
	req, err := http.NewRequest("POST", url, payload)
	if err != nil {
		return nil, errors.WithStack(err)
	}

	req.Header.Add("Accept", "application/json")
	req.Header.Add("Notion-Version", "2022-02-22")
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Authorization", fmt.Sprintf("Bearer %s", c.accessToken))
	
	resp, err := c.httpAPI.Do(req)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		b, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return nil, errors.WithStack(err)
		}
		return nil, errors.New(string(b))
	}
	body, err := ioutil.ReadAll(resp.Body)
	var a AutoGenerated
	jErr := json.Unmarshal(body, &a)
	if jErr != nil {
		// エラー処理
	}

	return &a, nil
}
